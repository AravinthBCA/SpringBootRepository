package JWT.Controller;

import java.security.Principal;
import java.util.Collections;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import JWT.Model.UserModel;
import JWT.Model.UserRequest;
import JWT.Model.UserResponse;
import JWT.Service.UserService;
import JWT.UtilityOwn.JwtUtility;

@RestController
@RequestMapping("/user")
public class UserRestController {

	@Autowired
	private UserService service;
	
	@Autowired
	private JwtUtility util;
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	RestTemplate restTemplate;
	
	@Autowired
	private UserDetailsService userDetailsService;
	
	@Bean
	RestTemplate getRestTemplate() {
		return new RestTemplate();
	}
	
	// Save user data in database
	@PostMapping("/save")
	public ResponseEntity<String> saveUser(@RequestBody UserModel user) {	
		Integer id = service.saveUser(user);
		String body = "User '"+id+"' Saved";
		return ResponseEntity.ok(body);
	}
	
	// Validate user and generate token(login)
	@GetMapping("/login")
	public ResponseEntity<UserResponse> loginUser(@RequestBody UserRequest userRequest,
																HttpServletResponse response){
		authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(userRequest.getUsername(), 
																				   userRequest.getPassword()));
		String token = util.generateToken(userRequest.getUsername());
		System.out.println("Token : "+token);
		
		Cookie cookie = new Cookie("username","Aravinth");
		cookie.setMaxAge(60 * 60 * 24);
		response.addCookie(cookie);
		
		return ResponseEntity.ok(new UserResponse(token,"Success! Generated By ARAVINTH"));
	}
	
//	@GetMapping("/login")
//	public ResponseEntity<String> loginUser(@RequestBody UserRequest userRequest){
//		authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(userRequest.getUsername(), userRequest.getPassword()));
//		String token = util.generateToken(userRequest.getUsername());
//		System.out.println("Token : "+token);
//		UserDetails user = userDetailsService.loadUserByUsername(userRequest.getUsername());
//		// validate token
//		boolean isValid = util.validateToken(token, user.getUsername());
//		if(isValid) {
//			UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(user.getUsername(),user.getPassword(),user.getAuthorities());
////			authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
//			// final object stored in SecurityContext with UserDetails(username and password)
////			System.out.println(authToken.getCredentials()+" -> "+authToken.getDetails());
//			SecurityContextHolder.getContext().setAuthentication(authToken);
//		}
////		return "redirect:/welcome";
//		ResponseEntity<String> sample = accessData(token);
//		if(sample.getStatusCodeValue() == 200) {
//			return ResponseEntity.ok("Hello User!"+util.getClaims(token));
//		}
//		else {
//			return ResponseEntity.ok("Invalid Request Check your Credentials");
//		}
//	}
	
	// after login only it call another restservice get the data and pring
	@GetMapping("/welcome")
	public String accessData(HttpServletRequest request){
		String authorizationHeader = request.getHeader("Authorization");
		HttpHeaders httpHeaders = new HttpHeaders();
		httpHeaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
		System.out.println("Token in  : "+authorizationHeader);
		ResponseEntity str = null;
		if(authorizationHeader != null) {
			httpHeaders.add("Authorization", "Bearer "+authorizationHeader);
			System.out.println(httpHeaders.toString());
			HttpEntity<String> customerHttpEntity = new HttpEntity<>(httpHeaders);
			ResponseEntity<String> str1 = restTemplate.exchange("http://localhost:8082", HttpMethod.GET, customerHttpEntity,String.class);
			return str1.getBody();
		}
		return null;
	}
	
	@GetMapping("/sample")
	public String sample() {
		return "Welcome All....";
	}
	
}
